3 days 
how we are going to do ?

J2SE: Java 2 std edition (Core Java)

day 1: 
------------------
basics of java why what and how?
procedural programming: looping arrray conditaional statement, dry run
intro to OO
	class , object , abs , encapsulation, modulary, inhertance, polymorphism
	ctr, setter, getter , logic method
how to write inheritance
polymorphism

---------------------------------------

day2:
String class, pefromance relations question
exception handing: Checked and uncheked ex? GPP(good programming practice)
IO input and output
collection: data str :) ready made ds, how to use that

------------------------------------------
day 3:
Java threads,solid , db programming
ui : swing desktop application, mvc design patterns
mini project
----------------------------

books:
* head first core java
* effective java
* clean code


SW setup:
----------
1. jdk: java dev kit
2. ide: eclipse/intellij ide


=====================================
Dayt 1:
=====================================
What is Java?
OO programming language + JVM (java virtual machine) + rich set of api
														collection, threads, networking, db progamming
														AI
:)

How to write hello world in java?
we have to write code in a  class, with main method 

Coding conversion (imp)

class Hello{
	public static void main(String args[]){
			System.out.println("hello all champs!");
	}
}

what is most imp thing in programming ?
	logic, how to thing the logic
	dry run
	
	i want to write 20 stars
	
*****
*****
*****
*****
*****
31,28,31,30,31,30,31,31,30,31,30,31 


Q1. print starts
Q2. date problem
Q3. result calculation
		p c maths
		89, 90 , 78 maths 
		1. find the avg marks
		2. find out this rank
			if avg >90 A+
			  avg >=80 A
			  avg >=70 B
		
------------------------------------
Procedural programming vs OO programming

Procedural programming:
data + logic those are seprate
Procedural programming there is possiblity of misuse of the data


OO programming:
better way encapsulate the code into a class
so that data can not be misuse


object orientation:
-------------------
what is object 
	
what is class
	aka cookie cutter
	use to create the object
	template .....
	class =data + method
	
	data: local data
		instance data
		static data
	
	methods :
		ctr
		getter
		setter
		business logic methods
		
	visiblity level: private
					default
					protected
					public *
		
class Employee{
	//instance data: per object
	private int id;
	private String name;
	private double salary;
	
	//class data: class variable: per class
	private static companyName="abc";
	
	//methods: ctr: have same name as of class, default , parameterized , copy ctr
	public Employee(){
	}
	//setter is used to set the values
	public void setSalary(double sal){
			int temp=4;// local variable , define inside a method
			salary=sal;
	}

	//getter
	public double getSalary(){
		return salary;
	}
	//Logic
	public double netSalary(){
			return salary * 0.8;
	}
}	
	
object: are runtime example of class

	Employee e=new Employee();

from a class i can create multiple objects

encapsulation: u should not allowed  anybody to change the variable directly
			i dont allow anybody with dirty feet in my mind
			
abstraction: focus on essential thing ignore the unnessary details*
	encapsulation vs abstraction
	how to achive abs: abstract class vs interface*
	
inheritance:
		provide u code resulability
		
		single    Y
		multiple  X  ?
		hierachical Y
		multilevel  Y
		
	
polymorphism
		one name many forms
		
								polymorphism
									|
		-------------------------------------------------
		|												|
		Run time poly..							compile time poly...
		Overriding										|
								--------------------------------------
								|				|			|			
								fun over	operator over  template classes
											  |
											--------------
											|			 |
											explicit	implicit
		
class A{
	int i;

}
class B extends A{
	int j;
}	
		
		
				Employee (id name and salary)
					|
		--------------------------------
		|								|
	PartTimeEmployee			FullTimeEmployee
	noOfHr, payPerHr			ppfAccNo
	
		payment()				payment()
		
		
inhertance?
abstract class?
interface?
		
		
		
function overloading?
--------------------
Loose couping and high cohesion

u should alway design ur application as per interface (dont think kw interface)


		
		
			
				Account (id name and balance)
					|
		--------------------------------
		|								|
	SavingAccount			CurrentAccount
	intrestRate				overdraftAmount
	
		getTotal()				getTotal()
		



day2:
========================
Interface, abs class final keyword
String class, pefromance relations question
exception handing: Checked and uncheked ex? GPP(good programming practice)
IO input and output
basics of annotations, annonymous inner class


Whenever we want to achive abstraction in java
we have 2 ways:
abs class
Interface

Interface:
what is java interrface 
100% abstraction 


Exmple:

package com.session1;

//inheritance ex
interface Payable {
	public abstract double getPayment();
}

abstract class Employee implements Payable {
	private int id;
	private String name;

	public Employee(int id, String name) {
		this.id = id;
		this.name = name;
	}

	public void print() {
		System.out.println("id : " + id + " name : " + name);
	}
}

class Freelancer implements Payable {
	private String name;
	private String companyReg;
	private int payPerDay;
	private int noOfDay;

	public Freelancer(String name, String companyReg, int payPerDay, int noOfDay) {
		super();
		this.name = name;
		this.companyReg = companyReg;
		this.payPerDay = payPerDay;
		this.noOfDay = noOfDay;
	}

	@Override
	public double getPayment() {
		return payPerDay*noOfDay*0.7;
	}

	public void print() {
		System.out.println("name: "+ name+" companyReg:"+companyReg+" payPerDay:"+payPerDay+" noOfDay: "+noOfDay);
	}
}

class PartTimeEmployee extends Employee {
	private int noOfHr;
	private int payPerHr;

	public PartTimeEmployee(int id, String name, int noOfHr, int payPerHr) {
		super(id, name);
		this.noOfHr = noOfHr;
		this.payPerHr = payPerHr;
	}

	@Override
	public double getPayment() {
		return noOfHr * payPerHr * 0.8;
	}

	public void print() {
		super.print();
		System.out.println("noOfHr: " + noOfHr + " payPerHr: " + payPerHr);
	}
}

class FullTimeEmployee extends Employee {
	private String ppfNumber;
	private double baseSalary;

	public FullTimeEmployee(int id, String name, String ppfNumber, double baseSalary) {
		super(id, name);
		this.ppfNumber = ppfNumber;
		this.baseSalary = baseSalary;
	}

	@Override
	public double getPayment() {
		return baseSalary * 5;
	}

	public void print() {
		super.print();
		System.out.println("ppfNumber: " + ppfNumber + " baseSalary: " + baseSalary);
	}

}

//class ProcessPayment {
//	public static void process(Employee employee) {
//		// start the db... result into this
//		double payment = employee.getPayment();
//		// store into db
//		System.out.println("payment is process :" + payment);
//	}
//}

class ProcessPayment {
	public static void process(Payable payable) {
		// start the db... result into this
		double payment = payable.getPayment();
		// store into db
		System.out.println("payment is process :" + payment);
	}
}

public class A_DemoClass {
	public static void main(String[] args) {
		Employee employee1 = new PartTimeEmployee(1, "pol", 40, 200);
		Employee employee2 = new FullTimeEmployee(1, "raj", "ASB12323", 2000);

		Freelancer freelancer=new Freelancer("raja", "AS23", 6700, 20);
		ProcessPayment.process(employee1);
		ProcessPayment.process(employee2);
		ProcessPayment.process(freelancer);

//		System.out.println("employee1"+  employee1.getPayment());
//		System.out.println("employee2"+  employee2.getPayment());
//		employee1.print();
//		employee2.print();
	}

}


final KW:
----------
that can not change
final data
final method
final class
final object ref



String class, pefromance relations question
------------------------------------------
it is the only class in java for which new op is not mandatory

String s1=new String("lee");
or
String s2="lee";



exception handing: Checked and uncheked ex? GPP(good programming practice)

ref:
https://interviewnoodle.com/exception-in-java-89a0b41e0c45






User define exception:
throw vs throws
try
catch 
throw
throws
finally

Key topics:
-----------------
interface vs abst class
ex handing
string
java collection
threds


some imp question on exception handing
---------------------------------------
Object class in java
	toString()
	equals()
	hashCode()
	finalize()


------------------
collection: ArrayList and HashMap*

Q: create an application to store the Product information
	id
	name
	price
	
 i want to do crud operation on this productstore
 C: create
 R: read
 U: update
 D: Delete
 
 3 tiers
 controller ----------------------- service layer --------------------- dao layer ------------ db
																	DAO: crud operation
																		intract with db
	RES								brain of ur application
									data validation
									tx
									sec
									caching
	
Full stack dev
	
 
 Enterprise edition 3 tier arch
 
--------------------------
Data structure:
	Stack
	Queue
	LinkList
	Tree
	
	what java says u dnot hv to create them
	
	readymade ds:" java collection"
	aka readymade ds in java
	how to use them?
	performance consideration?
 



Basics of java collection api
------------------------
 	readymade ds:" java collection"
	aka readymade ds in java
	how to use them?
	performance consideration?
	
	Collection
		List: allow duplicate
			LinkList Vector ArrayList
			PriorityQueue
			
		Set
			HashSet
			LinkedHashSet
			TreeSet
		Map
			HashMap
			LinkedHashMap
			TreeMap
			
		

Day 3:
------
Java collection
		List: allow duplicate
			LinkList Vector ArrayList
			PriorityQueue
			
		Set
			HashSet
			LinkedHashSet
			TreeSet
		Map
			HashMap
			LinkedHashMap
			TreeMap

inner class
	top level inner class
	method local inner class
	annonymous inner classes
	Examples

Java Threads, concurrency
	process vs program vs threads
	Java threads life cycle
	hello world
	dead lock
	producer consumer problem
	
annotations

Intro to Swing programming

Examples and case study

Roadmap



Basics of java collection api
------------------------------
 	readymade ds:" java collection"
	aka readymade ds in java
	how to use them?
	performance consideration?
	
	Collection
		List: allow duplicate
			LinkList 
			Vector 
			ArrayList
			PriorityQueue
			
		Set
			HashSet: interanlly use hashing*
				hashing make searching optimal operation
				Big O Notation: O(1)
				
				neighter sorted nor ordered
				
			LinkedHashSet
				it maintain the inerstion order
			TreeSet
				put the data into to sorted order
		Map
			HashMap
			LinkedHashMap
			TreeMap


Assignements:
-----------------
Q: We have list of products 
class Product{
	private int id;
	private String name;
	private double price;
	private String cat;
}

a)create list of list
b) print the list
c) sort and print as per id
c) sort and print as per name
c) sort and print as per price



inner class
----------
	top level inner class
	method local inner class
	annonymous inner classes
	Examples








